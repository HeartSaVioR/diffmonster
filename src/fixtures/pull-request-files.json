[
  {
    "sha": "3f45a954ebd1ff57afdf19528afae77c5a694ed8",
    "filename": "core/src/main/java/com/linecorp/armeria/client/limit/ConcurrencyLimitingHttpClient.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/line/armeria/blob/d98685978be10493e89ce96e4ef7eda843e5a98e/core/src/main/java/com/linecorp/armeria/client/limit/ConcurrencyLimitingHttpClient.java",
    "raw_url": "https://github.com/line/armeria/raw/d98685978be10493e89ce96e4ef7eda843e5a98e/core/src/main/java/com/linecorp/armeria/client/limit/ConcurrencyLimitingHttpClient.java",
    "contents_url": "https://api.github.com/repos/line/armeria/contents/core/src/main/java/com/linecorp/armeria/client/limit/ConcurrencyLimitingHttpClient.java?ref=d98685978be10493e89ce96e4ef7eda843e5a98e",
    "patch": "@@ -70,8 +70,9 @@ private ConcurrencyLimitingHttpClient(Client<? super HttpRequest, ? extends Http\n \n     @Override\n     protected Deferred<HttpResponse> defer(ClientRequestContext ctx, HttpRequest req) throws Exception {\n-        final DeferredHttpResponse res = new DeferredHttpResponse();\n         return new Deferred<HttpResponse>() {\n+            private final DeferredHttpResponse res = new DeferredHttpResponse();\n+\n             @Override\n             public HttpResponse response() {\n                 return res;"
  },
  {
    "sha": "37b80d240e0b8210ea386b665915dc2f023f598c",
    "filename": "core/src/main/java/com/linecorp/armeria/common/DefaultRpcResponse.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/line/armeria/blob/d98685978be10493e89ce96e4ef7eda843e5a98e/core/src/main/java/com/linecorp/armeria/common/DefaultRpcResponse.java",
    "raw_url": "https://github.com/line/armeria/raw/d98685978be10493e89ce96e4ef7eda843e5a98e/core/src/main/java/com/linecorp/armeria/common/DefaultRpcResponse.java",
    "contents_url": "https://api.github.com/repos/line/armeria/contents/core/src/main/java/com/linecorp/armeria/common/DefaultRpcResponse.java?ref=d98685978be10493e89ce96e4ef7eda843e5a98e",
    "patch": "@@ -22,6 +22,8 @@\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n \n+import javax.annotation.Nullable;\n+\n import com.google.common.base.MoreObjects;\n \n import com.linecorp.armeria.common.util.Exceptions;\n@@ -48,7 +50,7 @@ public DefaultRpcResponse() {}\n      *\n      * @param result the result or an RPC call\n      */\n-    public DefaultRpcResponse(Object result) {\n+    public DefaultRpcResponse(@Nullable Object result) {\n         complete(result);\n     }\n "
  },
  {
    "sha": "b55441cdadf57e52c95f1b5199eed7101a40f433",
    "filename": "core/src/main/java/com/linecorp/armeria/common/RpcResponse.java",
    "status": "modified",
    "additions": 38,
    "deletions": 1,
    "changes": 39,
    "blob_url": "https://github.com/line/armeria/blob/d98685978be10493e89ce96e4ef7eda843e5a98e/core/src/main/java/com/linecorp/armeria/common/RpcResponse.java",
    "raw_url": "https://github.com/line/armeria/raw/d98685978be10493e89ce96e4ef7eda843e5a98e/core/src/main/java/com/linecorp/armeria/common/RpcResponse.java",
    "contents_url": "https://api.github.com/repos/line/armeria/contents/core/src/main/java/com/linecorp/armeria/common/RpcResponse.java?ref=d98685978be10493e89ce96e4ef7eda843e5a98e",
    "patch": "@@ -16,10 +16,14 @@\n \n package com.linecorp.armeria.common;\n \n+import static java.util.Objects.requireNonNull;\n+\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.CompletionStage;\n import java.util.concurrent.Future;\n \n+import javax.annotation.Nullable;\n+\n /**\n  * An RPC {@link Response}. It is a {@link CompletionStage} whose result signifies the return value of an RPC\n  * call.\n@@ -29,7 +33,7 @@\n     /**\n      * Creates a new successfully complete {@link RpcResponse}.\n      */\n-    static RpcResponse of(Object value) {\n+    static RpcResponse of(@Nullable Object value) {\n         return new DefaultRpcResponse(value);\n     }\n \n@@ -41,6 +45,39 @@ static RpcResponse ofFailure(Throwable cause) {\n     }\n \n     /**\n+     * Creates a new {@link RpcResponse} that is completed successfully or exceptionally based on the\n+     * completion of the specified {@link CompletionStage}.\n+     */\n+    static RpcResponse from(CompletionStage<?> stage) {\n+        requireNonNull(stage, \"stage\");\n+        final DefaultRpcResponse res = new DefaultRpcResponse();\n+        stage.whenComplete((value, cause) -> {\n+            if (cause != null) {\n+                res.completeExceptionally(cause);\n+            } else {\n+                res.complete(value);\n+            }\n+        });\n+        return res;\n+    }\n+\n+    /**\n+     * Returns the result value if completed successfully or\n+     * throws an unchecked exception if completed exceptionally.\n+     *\n+     * @see CompletableFuture#join()\n+     */\n+    Object join();\n+\n+    /**\n+     * Returns the specified {@code valueIfAbsent} when not complete, or\n+     * returns the result value or throws an exception when complete.\n+     *\n+     * @see CompletableFuture#getNow(Object)\n+     */\n+    Object getNow(Object valueIfAbsent);\n+\n+    /**\n      * Returns the cause of the failure if this {@link RpcResponse} completed exceptionally.\n      *\n      * @return the cause, or"
  },
  {
    "sha": "dd938b2c602d7fc9ccc3d78fd656603e52cbfa74",
    "filename": "core/src/main/java/com/linecorp/armeria/common/http/DeferredHttpResponse.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/line/armeria/blob/d98685978be10493e89ce96e4ef7eda843e5a98e/core/src/main/java/com/linecorp/armeria/common/http/DeferredHttpResponse.java",
    "raw_url": "https://github.com/line/armeria/raw/d98685978be10493e89ce96e4ef7eda843e5a98e/core/src/main/java/com/linecorp/armeria/common/http/DeferredHttpResponse.java",
    "contents_url": "https://api.github.com/repos/line/armeria/contents/core/src/main/java/com/linecorp/armeria/common/http/DeferredHttpResponse.java?ref=d98685978be10493e89ce96e4ef7eda843e5a98e",
    "patch": "@@ -31,7 +31,7 @@\n  *         // Delay all requests by 3 seconds.\n  *         DeferredHttpResponse res = new DeferredHttpResponse();\n  *         ctx.eventLoop().schedule(() -> {\n- *             res.setDelegate(delegate().serve(ctx, req));\n+ *             res.delegate(delegate().serve(ctx, req));\n  *         }, 3, TimeUnit.SECONDS);\n  *         return res;\n  *     }"
  },
  {
    "sha": "d48b40e5d95758133a21fa237a5fc6f6187b1ff2",
    "filename": "core/src/main/java/com/linecorp/armeria/common/http/HttpResponse.java",
    "status": "modified",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/line/armeria/blob/d98685978be10493e89ce96e4ef7eda843e5a98e/core/src/main/java/com/linecorp/armeria/common/http/HttpResponse.java",
    "raw_url": "https://github.com/line/armeria/raw/d98685978be10493e89ce96e4ef7eda843e5a98e/core/src/main/java/com/linecorp/armeria/common/http/HttpResponse.java",
    "contents_url": "https://api.github.com/repos/line/armeria/contents/core/src/main/java/com/linecorp/armeria/common/http/HttpResponse.java?ref=d98685978be10493e89ce96e4ef7eda843e5a98e",
    "patch": "@@ -16,7 +16,10 @@\n \n package com.linecorp.armeria.common.http;\n \n+import static java.util.Objects.requireNonNull;\n+\n import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n import java.util.concurrent.Executor;\n \n import org.reactivestreams.Publisher;\n@@ -36,6 +39,35 @@ static HttpResponse of(Publisher<? extends HttpObject> publisher) {\n         return new PublisherBasedHttpResponse(publisher);\n     }\n \n+    /**\n+     * Creates a new failed instance.\n+     */\n+    static HttpResponse ofFailed(Throwable cause) {\n+        final DefaultHttpResponse res = new DefaultHttpResponse();\n+        res.close(cause);\n+        return res;\n+    }\n+\n+    /**\n+     * Creates a new instance that delegates to the {@link HttpResponse} produced by the specified\n+     * {@link CompletionStage}. If the specified {@link CompletionStage} fails, the returned response will be\n+     * closed with the same cause as well.\n+     */\n+    static HttpResponse from(CompletionStage<? extends HttpResponse> stage) {\n+        requireNonNull(stage, \"stage\");\n+        final DeferredHttpResponse res = new DeferredHttpResponse();\n+        stage.whenComplete((delegate, cause) -> {\n+            if (cause != null) {\n+                res.close(cause);\n+            } else if (delegate == null) {\n+                res.close(new NullPointerException(\"stage produced a null delegate: \" + stage));\n+            } else {\n+                res.delegate(delegate);\n+            }\n+        });\n+        return res;\n+    }\n+\n     @Override\n     CompletableFuture<Void> closeFuture();\n "
  },
  {
    "sha": "3f66a9445324357796e9983c4af5069acf624fd7",
    "filename": "core/src/main/java/com/linecorp/armeria/common/util/Exceptions.java",
    "status": "modified",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/line/armeria/blob/d98685978be10493e89ce96e4ef7eda843e5a98e/core/src/main/java/com/linecorp/armeria/common/util/Exceptions.java",
    "raw_url": "https://github.com/line/armeria/raw/d98685978be10493e89ce96e4ef7eda843e5a98e/core/src/main/java/com/linecorp/armeria/common/util/Exceptions.java",
    "contents_url": "https://api.github.com/repos/line/armeria/contents/core/src/main/java/com/linecorp/armeria/common/util/Exceptions.java?ref=d98685978be10493e89ce96e4ef7eda843e5a98e",
    "patch": "@@ -20,6 +20,9 @@\n \n import java.io.IOException;\n import java.nio.channels.ClosedChannelException;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n import java.util.regex.Pattern;\n \n import org.slf4j.Logger;\n@@ -170,6 +173,35 @@ public static boolean isExpected(Throwable cause) {\n     }\n \n     /**\n+     * Throws the specified exception violating the {@code throws} clause of the enclosing method.\n+     * This method is useful when you need to rethrow a checked exception in {@link Function}, {@link Consumer},\n+     * {@link Supplier} and {@link Runnable}, only if you are sure that the rethrown exception will be handled\n+     * as a {@link Throwable} or an {@link Exception}. For example:\n+     * <pre>{@code\n+     * CompletableFuture.supplyAsync(() -> {\n+     *     try (FileInputStream fin = new FileInputStream(...)) {\n+     *         ....\n+     *         return someValue;\n+     *     } catch (IOException e) {\n+     *         // 'throw e;' won't work because Runnable.run() does not allow any checked exceptions.\n+     *         return Exceptions.unsafeThrow(e);\n+     *     }\n+     * }).exceptionally(CompletionActions::log);\n+     * }</pre>\n+     */\n+    public static <T> T throwUnsafely(Throwable cause) {\n+        doThrowUnsafely(requireNonNull(cause, \"cause\"));\n+        return null;\n+    }\n+\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <E extends Throwable> void doThrowUnsafely(Throwable cause) throws E {\n+        throw (E) cause;\n+    }\n+\n+\n+    /**\n      * Returns the stack trace of the specified {@code exception} as a {@link String} instead.\n      *\n      * @deprecated Use {@link Throwables#getStackTraceAsString(Throwable)}."
  },
  {
    "sha": "cb491ce964ed55ae1dac75155dfa76935510addc",
    "filename": "core/src/main/java/com/linecorp/armeria/server/http/auth/HttpAuthService.java",
    "status": "modified",
    "additions": 7,
    "deletions": 11,
    "changes": 18,
    "blob_url": "https://github.com/line/armeria/blob/d98685978be10493e89ce96e4ef7eda843e5a98e/core/src/main/java/com/linecorp/armeria/server/http/auth/HttpAuthService.java",
    "raw_url": "https://github.com/line/armeria/raw/d98685978be10493e89ce96e4ef7eda843e5a98e/core/src/main/java/com/linecorp/armeria/server/http/auth/HttpAuthService.java",
    "contents_url": "https://api.github.com/repos/line/armeria/contents/core/src/main/java/com/linecorp/armeria/server/http/auth/HttpAuthService.java?ref=d98685978be10493e89ce96e4ef7eda843e5a98e",
    "patch": "@@ -27,10 +27,10 @@\n import com.google.common.collect.ImmutableList;\n \n import com.linecorp.armeria.common.http.DefaultHttpResponse;\n-import com.linecorp.armeria.common.http.DeferredHttpResponse;\n import com.linecorp.armeria.common.http.HttpRequest;\n import com.linecorp.armeria.common.http.HttpResponse;\n import com.linecorp.armeria.common.http.HttpStatus;\n+import com.linecorp.armeria.common.util.Exceptions;\n import com.linecorp.armeria.server.DecoratingService;\n import com.linecorp.armeria.server.Service;\n import com.linecorp.armeria.server.ServiceRequestContext;\n@@ -101,20 +101,16 @@ protected HttpResponse onFailure(ServiceRequestContext ctx, HttpRequest req, @Nu\n \n     @Override\n     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {\n-        DeferredHttpResponse res = new DeferredHttpResponse();\n-\n-        authorize(req, ctx).whenCompleteAsync((result, t) -> {\n+        return HttpResponse.from(authorize(req, ctx).handleAsync((result, t) -> {\n             try {\n                 if (t != null || !result) {\n-                    res.delegate(onFailure(ctx, req, t));\n+                    return onFailure(ctx, req, t);\n                 } else {\n-                    res.delegate(onSuccess(ctx, req));\n+                    return onSuccess(ctx, req);\n                 }\n-            } catch (Throwable cause) {\n-                res.close(cause);\n+            } catch (Exception e) {\n+                return Exceptions.throwUnsafely(e);\n             }\n-        }, ctx.contextAwareEventLoop());\n-\n-        return res;\n+        }, ctx.contextAwareEventLoop()));\n     }\n }"
  },
  {
    "sha": "dce4cb8248cdd203d3daa391969cbd5d79a1429a",
    "filename": "core/src/main/java/com/linecorp/armeria/server/http/dynamic/MappedDynamicFunction.java",
    "status": "modified",
    "additions": 8,
    "deletions": 18,
    "changes": 26,
    "blob_url": "https://github.com/line/armeria/blob/d98685978be10493e89ce96e4ef7eda843e5a98e/core/src/main/java/com/linecorp/armeria/server/http/dynamic/MappedDynamicFunction.java",
    "raw_url": "https://github.com/line/armeria/raw/d98685978be10493e89ce96e4ef7eda843e5a98e/core/src/main/java/com/linecorp/armeria/server/http/dynamic/MappedDynamicFunction.java",
    "contents_url": "https://api.github.com/repos/line/armeria/contents/core/src/main/java/com/linecorp/armeria/server/http/dynamic/MappedDynamicFunction.java?ref=d98685978be10493e89ce96e4ef7eda843e5a98e",
    "patch": "@@ -5,7 +5,6 @@\n import java.util.Map;\n import java.util.concurrent.CompletionStage;\n \n-import com.linecorp.armeria.common.http.DeferredHttpResponse;\n import com.linecorp.armeria.common.http.HttpRequest;\n import com.linecorp.armeria.common.http.HttpResponse;\n import com.linecorp.armeria.server.ServiceRequestContext;\n@@ -33,23 +32,14 @@\n \n     @Override\n     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {\n-        final DeferredHttpResponse res = new DeferredHttpResponse();\n-        try {\n-            Object ret = function.serve(ctx, req, args);\n-            if (!(ret instanceof CompletionStage)) {\n-                throw new IllegalStateException(\"Illegal return type: \" + ret.getClass().getSimpleName());\n-            }\n-            ((CompletionStage<HttpResponse>) ret)\n-                    .whenComplete((httpResponse, t) -> {\n-                        if (t != null) {\n-                            res.close(t);\n-                        } else {\n-                            res.delegate(httpResponse);\n-                        }\n-                    });\n-        } catch (Throwable e) {\n-            res.close(e);\n+        final Object ret = function.serve(ctx, req, args);\n+        if (!(ret instanceof CompletionStage)) {\n+            return HttpResponse.ofFailed(new IllegalStateException(\n+                    \"illegal return type: \" + ret.getClass().getSimpleName()));\n         }\n-        return res;\n+\n+        @SuppressWarnings(\"unchecked\")\n+        CompletionStage<HttpResponse> castStage = (CompletionStage<HttpResponse>) ret;\n+        return HttpResponse.from(castStage);\n     }\n }"
  },
  {
    "sha": "04fb8989f7887ee0a709995a2c5b1e2493de08e3",
    "filename": "core/src/test/java/com/linecorp/armeria/common/RpcResponseTest.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/line/armeria/blob/d98685978be10493e89ce96e4ef7eda843e5a98e/core/src/test/java/com/linecorp/armeria/common/RpcResponseTest.java",
    "raw_url": "https://github.com/line/armeria/raw/d98685978be10493e89ce96e4ef7eda843e5a98e/core/src/test/java/com/linecorp/armeria/common/RpcResponseTest.java",
    "contents_url": "https://api.github.com/repos/line/armeria/contents/core/src/test/java/com/linecorp/armeria/common/RpcResponseTest.java?ref=d98685978be10493e89ce96e4ef7eda843e5a98e",
    "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+\n+import org.junit.Test;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+public class RpcResponseTest {\n+\n+    private static final Object RESULT = new Object();\n+    private static final Throwable CAUSE = Exceptions.clearTrace(new Throwable());\n+\n+    @Test\n+    public void successfulFrom() {\n+        final CompletableFuture<Object> future = new CompletableFuture<>();\n+        final RpcResponse res = RpcResponse.from(future);\n+        assertThat(res.isDone()).isFalse();\n+        future.complete(RESULT);\n+        assertThat(res.isDone()).isTrue();\n+        assertThat(res.join()).isSameAs(RESULT);\n+    }\n+\n+    @Test\n+    public void failedFrom() {\n+        final CompletableFuture<Object> future = new CompletableFuture<>();\n+        final RpcResponse res = RpcResponse.from(future);\n+        assertThat(res.isDone()).isFalse();\n+        future.completeExceptionally(CAUSE);\n+        assertThat(res.isDone()).isTrue();\n+        assertThatThrownBy(res::join).isInstanceOf(CompletionException.class).hasCause(CAUSE);\n+    }\n+}"
  },
  {
    "sha": "fdea1d2356b33a873994e0965d16035310c53093",
    "filename": "core/src/test/java/com/linecorp/armeria/server/http/auth/HttpAuthServiceTest.java",
    "status": "renamed",
    "additions": 72,
    "deletions": 50,
    "changes": 122,
    "blob_url": "https://github.com/line/armeria/blob/d98685978be10493e89ce96e4ef7eda843e5a98e/core/src/test/java/com/linecorp/armeria/server/http/auth/HttpAuthServiceTest.java",
    "raw_url": "https://github.com/line/armeria/raw/d98685978be10493e89ce96e4ef7eda843e5a98e/core/src/test/java/com/linecorp/armeria/server/http/auth/HttpAuthServiceTest.java",
    "contents_url": "https://api.github.com/repos/line/armeria/contents/core/src/test/java/com/linecorp/armeria/server/http/auth/HttpAuthServiceTest.java?ref=d98685978be10493e89ce96e4ef7eda843e5a98e",
    "patch": "@@ -16,6 +16,7 @@\n \n package com.linecorp.armeria.server.http.auth;\n \n+import static java.util.concurrent.CompletableFuture.completedFuture;\n import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n \n@@ -25,6 +26,7 @@\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n \n import org.apache.http.client.methods.CloseableHttpResponse;\n import org.apache.http.client.methods.HttpGet;\n@@ -39,6 +41,7 @@\n \n import com.linecorp.armeria.common.http.HttpHeaderNames;\n import com.linecorp.armeria.common.http.HttpRequest;\n+import com.linecorp.armeria.common.http.HttpResponse;\n import com.linecorp.armeria.common.http.HttpResponseWriter;\n import com.linecorp.armeria.common.http.HttpStatus;\n import com.linecorp.armeria.server.ServerBuilder;\n@@ -48,91 +51,92 @@\n import com.linecorp.armeria.server.logging.LoggingService;\n import com.linecorp.armeria.testing.server.ServerRule;\n \n-public class AuthServiceTest {\n+public class HttpAuthServiceTest {\n \n     private static final Encoder BASE64_ENCODER = Base64.getEncoder();\n \n     @ClassRule\n     public static final ServerRule server = new ServerRule() {\n         @Override\n         protected void configure(ServerBuilder sb) throws Exception {\n+            final HttpService ok = new AbstractHttpService() {\n+                @Override\n+                protected void doGet(\n+                        ServiceRequestContext ctx, HttpRequest req, HttpResponseWriter res) {\n+                    res.respond(HttpStatus.OK);\n+                }\n+            };\n+\n             // Auth with arbitrary authorizer\n             Authorizer<HttpRequest> authorizer = (ctx, req) ->\n                     CompletableFuture.supplyAsync(\n                             () -> \"unit test\".equals(req.headers().get(HttpHeaderNames.AUTHORIZATION)));\n             sb.serviceAt(\n                     \"/\",\n-                    new AbstractHttpService() {\n-                        @Override\n-                        protected void doGet(\n-                                ServiceRequestContext ctx, HttpRequest req, HttpResponseWriter res) {\n-                            res.respond(HttpStatus.OK);\n-                        }\n-                    }.decorate(HttpAuthService.newDecorator(authorizer))\n-                     .decorate(LoggingService::new));\n+                    ok.decorate(HttpAuthService.newDecorator(authorizer))\n+                      .decorate(LoggingService::new));\n \n             // Auth with HTTP basic\n             final Map<String, String> usernameToPassword = ImmutableMap.of(\"brown\", \"cony\", \"pangyo\", \"choco\");\n             Authorizer<BasicToken> httpBasicAuthorizer = (ctx, token) -> {\n                 String username = token.username();\n                 String password = token.password();\n-                return CompletableFuture.completedFuture(password.equals(usernameToPassword.get(username)));\n+                return completedFuture(password.equals(usernameToPassword.get(username)));\n             };\n             sb.serviceAt(\n                     \"/basic\",\n-                    new AbstractHttpService() {\n-                        @Override\n-                        protected void doGet(\n-                                ServiceRequestContext ctx, HttpRequest req, HttpResponseWriter res) {\n-                            res.respond(HttpStatus.OK);\n-                        }\n-                    }.decorate(new HttpAuthServiceBuilder().addBasicAuth(httpBasicAuthorizer).newDecorator())\n-                     .decorate(LoggingService::new));\n+                    ok.decorate(new HttpAuthServiceBuilder().addBasicAuth(httpBasicAuthorizer).newDecorator())\n+                      .decorate(LoggingService::new));\n \n             // Auth with OAuth1a\n             Authorizer<OAuth1aToken> oAuth1aAuthorizer = (ctx, token) ->\n-                    CompletableFuture.completedFuture(\"dummy_signature\".equals(token.signature()));\n+                    completedFuture(\"dummy_signature\".equals(token.signature()));\n             sb.serviceAt(\n                     \"/oauth1a\",\n-                    new AbstractHttpService() {\n-                        @Override\n-                        protected void doGet(\n-                                ServiceRequestContext ctx, HttpRequest req, HttpResponseWriter res) {\n-                            res.respond(HttpStatus.OK);\n-                        }\n-                    }.decorate(new HttpAuthServiceBuilder().addOAuth1a(oAuth1aAuthorizer).newDecorator())\n-                     .decorate(LoggingService::new));\n+                    ok.decorate(new HttpAuthServiceBuilder().addOAuth1a(oAuth1aAuthorizer).newDecorator())\n+                      .decorate(LoggingService::new));\n \n             // Auth with OAuth2\n             Authorizer<OAuth2Token> oAuth2aAuthorizer = (ctx, token) ->\n-                    CompletableFuture.completedFuture(\"dummy_oauth2_token\".equals(token.accessToken()));\n+                    completedFuture(\"dummy_oauth2_token\".equals(token.accessToken()));\n             sb.serviceAt(\n                     \"/oauth2\",\n-                    new AbstractHttpService() {\n-                        @Override\n-                        protected void doGet(\n-                                ServiceRequestContext ctx, HttpRequest req, HttpResponseWriter res) {\n-                            res.respond(HttpStatus.OK);\n-                        }\n-                    }.decorate(new HttpAuthServiceBuilder().addOAuth2(oAuth2aAuthorizer).newDecorator())\n-                     .decorate(LoggingService::new));\n+                    ok.decorate(new HttpAuthServiceBuilder().addOAuth2(oAuth2aAuthorizer).newDecorator())\n+                      .decorate(LoggingService::new));\n \n             // Auth with all predicates above!\n-            HttpService compositeService = new AbstractHttpService() {\n-                @Override\n-                protected void doGet(\n-                        ServiceRequestContext ctx, HttpRequest req, HttpResponseWriter res) {\n-                    res.respond(HttpStatus.OK);\n-                }\n-            };\n-            HttpAuthService compositeAuth = new HttpAuthServiceBuilder()\n-                    .add(authorizer)\n-                    .addBasicAuth(httpBasicAuthorizer)\n-                    .addOAuth1a(oAuth1aAuthorizer)\n-                    .addOAuth2(oAuth2aAuthorizer)\n-                    .build(compositeService);\n             sb.serviceAt(\n-                    \"/composite\", compositeAuth.decorate(LoggingService::new));\n+                    \"/composite\",\n+                    new HttpAuthServiceBuilder().add(authorizer)\n+                                                .addBasicAuth(httpBasicAuthorizer)\n+                                                .addOAuth1a(oAuth1aAuthorizer)\n+                                                .addOAuth2(oAuth2aAuthorizer)\n+                                                .build(ok)\n+                                                .decorate(LoggingService::new));\n+\n+            // Authorizer fails with an exception.\n+            sb.serviceAt(\n+                    \"/authorizer_exception\",\n+                    ok.decorate(new HttpAuthServiceBuilder().add((ctx, data) -> {\n+                        throw new RuntimeException(\"bug!\");\n+                    }).newDecorator())\n+                      .decorate(LoggingService::new));\n+\n+            // AuthService fails when building a success message.\n+            sb.serviceAt(\n+                    \"/on_success_exception\",\n+                    ok.decorate(service -> new HttpAuthService(service) {\n+                        @Override\n+                        protected CompletionStage<Boolean> authorize(HttpRequest request,\n+                                                                     ServiceRequestContext ctx) {\n+                            return completedFuture(true);\n+                        }\n+\n+                        @Override\n+                        protected HttpResponse onSuccess(ServiceRequestContext ctx, HttpRequest req) {\n+                            throw new RuntimeException(\"bug!\");\n+                        }\n+                    }).decorate(LoggingService::new));\n         }\n     };\n \n@@ -258,6 +262,24 @@ public void testCompositeAuth() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testAuthorizerException() throws Exception {\n+        try (CloseableHttpClient hc = HttpClients.createMinimal()) {\n+            try (CloseableHttpResponse res = hc.execute(new HttpGet(server.uri(\"/authorizer_exception\")))) {\n+                assertThat(res.getStatusLine().toString(), is(\"HTTP/1.1 401 Unauthorized\"));\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testOnSuccessException() throws Exception {\n+        try (CloseableHttpClient hc = HttpClients.createMinimal()) {\n+            try (CloseableHttpResponse res = hc.execute(new HttpGet(server.uri(\"/on_success_exception\")))) {\n+                assertThat(res.getStatusLine().toString(), is(\"HTTP/1.1 500 Internal Server Error\"));\n+            }\n+        }\n+    }\n+\n     private static HttpRequestBase getRequest(String path, String authorization) {\n         HttpGet request = new HttpGet(server.uri(path));\n         request.addHeader(\"Authorization\", authorization);",
    "previous_filename": "core/src/test/java/com/linecorp/armeria/server/http/auth/AuthServiceTest.java"
  },
  {
    "sha": "944697e782797b362494275510b46b37d7c181da",
    "filename": "core/src/main/java/com/linecorp/armeria/client/http/DefaultHttpClient.java",
    "status": "modified",
    "additions": 0,
    "deletions": 5,
    "changes": 5,
    "blob_url": "https://github.com/line/armeria/blob/35b406e5c8f4098da9c460696f01a835e79078b2/core/src/main/java/com/linecorp/armeria/client/http/DefaultHttpClient.java",
    "raw_url": "https://github.com/line/armeria/raw/35b406e5c8f4098da9c460696f01a835e79078b2/core/src/main/java/com/linecorp/armeria/client/http/DefaultHttpClient.java",
    "contents_url": "https://api.github.com/repos/line/armeria/contents/core/src/main/java/com/linecorp/armeria/client/http/DefaultHttpClient.java?ref=35b406e5c8f4098da9c460696f01a835e79078b2",
    "patch": "@@ -40,11 +40,6 @@\n         super(params, delegate, sessionProtocol, endpoint);\n     }\n \n-    // For SimpleHttpClient\n-    EventLoop eventLoop0() {\n-        return eventLoop();\n-    }\n-\n     @Override\n     public HttpResponse execute(HttpRequest req) {\n         return execute(eventLoop(), req);"
  },
  {
    "sha": "9b77905878c9cb841f2623cdcd056475ce123829",
    "filename": "core/src/main/java/com/linecorp/armeria/client/http/DefaultSimpleHttpClient.java",
    "status": "removed",
    "additions": 0,
    "deletions": 125,
    "changes": 125,
    "blob_url": "https://github.com/line/armeria/blob/8fe17cd5f52444dcf0de3c7123feccc2604ecde1/core/src/main/java/com/linecorp/armeria/client/http/DefaultSimpleHttpClient.java",
    "raw_url": "https://github.com/line/armeria/raw/8fe17cd5f52444dcf0de3c7123feccc2604ecde1/core/src/main/java/com/linecorp/armeria/client/http/DefaultSimpleHttpClient.java",
    "contents_url": "https://api.github.com/repos/line/armeria/contents/core/src/main/java/com/linecorp/armeria/client/http/DefaultSimpleHttpClient.java?ref=8fe17cd5f52444dcf0de3c7123feccc2604ecde1",
    "patch": "@@ -1,125 +0,0 @@\n-/*\n- * Copyright 2016 LINE Corporation\n- *\n- * LINE Corporation licenses this file to you under the Apache License,\n- * version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package com.linecorp.armeria.client.http;\n-\n-import static com.linecorp.armeria.common.util.Functions.voidFunction;\n-\n-import java.net.URI;\n-import java.util.Arrays;\n-\n-import com.linecorp.armeria.client.ClientBuilderParams;\n-import com.linecorp.armeria.client.ClientFactory;\n-import com.linecorp.armeria.client.ClientOptions;\n-import com.linecorp.armeria.common.http.AggregatedHttpMessage;\n-import com.linecorp.armeria.common.http.HttpData;\n-import com.linecorp.armeria.common.http.HttpMethod;\n-import com.linecorp.armeria.common.http.HttpResponse;\n-import com.linecorp.armeria.common.util.CompletionActions;\n-import com.linecorp.armeria.internal.http.ArmeriaHttpUtil;\n-\n-import io.netty.channel.EventLoop;\n-import io.netty.handler.codec.http.HttpResponseStatus;\n-import io.netty.util.concurrent.Future;\n-import io.netty.util.concurrent.Promise;\n-\n-@SuppressWarnings(\"deprecation\")\n-final class DefaultSimpleHttpClient implements SimpleHttpClient {\n-\n-    private final ClientBuilderParams params;\n-    private final DefaultHttpClient client;\n-\n-    DefaultSimpleHttpClient(ClientBuilderParams params, DefaultHttpClient client) {\n-        this.params = params;\n-        this.client = client;\n-    }\n-\n-    @Override\n-    public ClientFactory factory() {\n-        return params.factory();\n-    }\n-\n-    @Override\n-    public URI uri() {\n-        return params.uri();\n-    }\n-\n-    @Override\n-    public Class<?> clientType() {\n-        return params.clientType();\n-    }\n-\n-    @Override\n-    public ClientOptions options() {\n-        return params.options();\n-    }\n-\n-    @Override\n-    public Future<SimpleHttpResponse> execute(SimpleHttpRequest sReq) {\n-        final EventLoop eventLoop = client.eventLoop0();\n-        final Promise<SimpleHttpResponse> promise = eventLoop.newPromise();\n-        try {\n-            URI uri = sReq.uri();\n-            StringBuilder uriBuilder = new StringBuilder(uri.getPath());\n-            if (uri.getQuery() != null) {\n-                uriBuilder.append('?');\n-                uriBuilder.append(uri.getQuery());\n-            }\n-            if (uri.getFragment() != null) {\n-                uriBuilder.append('#');\n-                uriBuilder.append(uri.getFragment());\n-            }\n-            final AggregatedHttpMessage aReq = AggregatedHttpMessage.of(\n-                    HttpMethod.valueOf(sReq.method().name()),\n-                    uriBuilder.toString(),\n-                    HttpData.of(sReq.content()));\n-\n-            // Convert the headers.\n-            ArmeriaHttpUtil.toArmeria(sReq.headers(), aReq.headers());\n-\n-            final HttpResponse res = client.execute(eventLoop, aReq);\n-            res.aggregate().handle(voidFunction((aRes, cause) -> {\n-                if (cause != null) {\n-                    promise.setFailure(cause);\n-                } else {\n-                    try {\n-                        final HttpData aContent = aRes.content();\n-                        final byte[] content;\n-                        if (aContent.offset() == 0 && aContent.length() == aContent.array().length) {\n-                            content = aContent.array();\n-                        } else {\n-                            content = Arrays.copyOfRange(aContent.array(), aContent.offset(),\n-                                                         aContent.length());\n-                        }\n-\n-                        final SimpleHttpResponse sRes = new SimpleHttpResponse(\n-                                HttpResponseStatus.valueOf(aRes.status().code()),\n-                                ArmeriaHttpUtil.toNettyHttp1(aRes.headers()),\n-                                content);\n-\n-                        promise.setSuccess(sRes);\n-                    } catch (Throwable t) {\n-                        promise.setFailure(t);\n-                    }\n-                }\n-            })).exceptionally(CompletionActions::log);\n-        } catch (Throwable t) {\n-            promise.setFailure(t);\n-        }\n-\n-        return promise;\n-    }\n-}"
  },
  {
    "sha": "c9a4533401f67ef6af8c1fda1580b76b1cd54fcf",
    "filename": "core/src/main/java/com/linecorp/armeria/client/http/HttpClientFactory.java",
    "status": "modified",
    "additions": 2,
    "deletions": 14,
    "changes": 16,
    "blob_url": "https://github.com/line/armeria/blob/35b406e5c8f4098da9c460696f01a835e79078b2/core/src/main/java/com/linecorp/armeria/client/http/HttpClientFactory.java",
    "raw_url": "https://github.com/line/armeria/raw/35b406e5c8f4098da9c460696f01a835e79078b2/core/src/main/java/com/linecorp/armeria/client/http/HttpClientFactory.java",
    "contents_url": "https://api.github.com/repos/line/armeria/contents/core/src/main/java/com/linecorp/armeria/client/http/HttpClientFactory.java?ref=35b406e5c8f4098da9c460696f01a835e79078b2",
    "patch": "@@ -119,15 +119,6 @@ protected Bootstrap newBootstrap() {\n             @SuppressWarnings(\"unchecked\")\n             T castClient = (T) client;\n             return castClient;\n-        } else if (clientType == SimpleHttpClient.class) {\n-            @SuppressWarnings(\"deprecation\")\n-            final SimpleHttpClient client = new DefaultSimpleHttpClient(\n-                    new DefaultClientBuilderParams(this, uri, SimpleHttpClient.class, options),\n-                    newHttpClient(uri, scheme, endpoint, options, delegate));\n-\n-            @SuppressWarnings(\"unchecked\")\n-            T castClient = (T) client;\n-            return castClient;\n         } else {\n             throw new IllegalArgumentException(\"unsupported client type: \" + clientType.getName());\n         }\n@@ -140,14 +131,11 @@ private DefaultHttpClient newHttpClient(URI uri, Scheme scheme, Endpoint endpoin\n                 delegate, scheme.sessionProtocol(), endpoint);\n     }\n \n-    @SuppressWarnings(\"deprecation\")\n     private static void validateClientType(Class<?> clientType) {\n-        if (clientType != HttpClient.class && clientType != SimpleHttpClient.class &&\n-            clientType != Client.class) {\n+        if (clientType != HttpClient.class && clientType != Client.class) {\n             throw new IllegalArgumentException(\n                     \"clientType: \" + clientType +\n-                    \" (expected: \" + HttpClient.class.getSimpleName() + \", \" +\n-                    SimpleHttpClient.class.getSimpleName() + \" or \" +\n+                    \" (expected: \" + HttpClient.class.getSimpleName() + \" or \" +\n                     Client.class.getSimpleName() + ')');\n         }\n     }"
  },
  {
    "sha": "cfd16bfcdcc51e96f9e8a86ff543e8e52a725909",
    "filename": "core/src/main/java/com/linecorp/armeria/client/http/SimpleHttpClient.java",
    "status": "removed",
    "additions": 0,
    "deletions": 39,
    "changes": 39,
    "blob_url": "https://github.com/line/armeria/blob/8fe17cd5f52444dcf0de3c7123feccc2604ecde1/core/src/main/java/com/linecorp/armeria/client/http/SimpleHttpClient.java",
    "raw_url": "https://github.com/line/armeria/raw/8fe17cd5f52444dcf0de3c7123feccc2604ecde1/core/src/main/java/com/linecorp/armeria/client/http/SimpleHttpClient.java",
    "contents_url": "https://api.github.com/repos/line/armeria/contents/core/src/main/java/com/linecorp/armeria/client/http/SimpleHttpClient.java?ref=8fe17cd5f52444dcf0de3c7123feccc2604ecde1",
    "patch": "@@ -1,39 +0,0 @@\n-/*\n- * Copyright 2016 LINE Corporation\n- *\n- * LINE Corporation licenses this file to you under the Apache License,\n- * version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package com.linecorp.armeria.client.http;\n-\n-import com.linecorp.armeria.client.ClientBuilderParams;\n-import com.linecorp.armeria.common.http.AggregatedHttpMessage;\n-\n-import io.netty.util.concurrent.Future;\n-\n-/**\n- * A simple HTTP client that can send a {@link SimpleHttpRequest} to an HTTP/1 or 2 server.\n- *\n- * @deprecated Use {@link HttpClient#execute(AggregatedHttpMessage)} instead.\n- * @see SimpleHttpRequestBuilder\n- */\n-@Deprecated\n-public interface SimpleHttpClient extends ClientBuilderParams {\n-    /**\n-     * Sends the specified {@code request} to the HTTP server asynchronously.\n-     *\n-     * @return the {@link Future} that is notified when a {@link SimpleHttpResponse} is received or\n-     *         when the request fails.\n-     */\n-    Future<SimpleHttpResponse> execute(SimpleHttpRequest request);\n-}"
  },
  {
    "sha": "2226242d48cc5e08a3007ffb3b48654d448ddaff",
    "filename": "core/src/main/java/com/linecorp/armeria/client/http/SimpleHttpRequest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 267,
    "changes": 267,
    "blob_url": "https://github.com/line/armeria/blob/8fe17cd5f52444dcf0de3c7123feccc2604ecde1/core/src/main/java/com/linecorp/armeria/client/http/SimpleHttpRequest.java",
    "raw_url": "https://github.com/line/armeria/raw/8fe17cd5f52444dcf0de3c7123feccc2604ecde1/core/src/main/java/com/linecorp/armeria/client/http/SimpleHttpRequest.java",
    "contents_url": "https://api.github.com/repos/line/armeria/contents/core/src/main/java/com/linecorp/armeria/client/http/SimpleHttpRequest.java?ref=8fe17cd5f52444dcf0de3c7123feccc2604ecde1",
    "patch": "@@ -1,267 +0,0 @@\n-/*\n- * Copyright 2016 LINE Corporation\n- *\n- * LINE Corporation licenses this file to you under the Apache License,\n- * version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package com.linecorp.armeria.client.http;\n-\n-import java.net.URI;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map.Entry;\n-import java.util.Set;\n-\n-import com.linecorp.armeria.common.http.AggregatedHttpMessage;\n-\n-import io.netty.handler.codec.http.FullHttpRequest;\n-import io.netty.handler.codec.http.HttpHeaders;\n-import io.netty.handler.codec.http.HttpMethod;\n-\n-/**\n- * A container for information to send in an HTTP request. This is a simpler version of {@link FullHttpRequest}\n- * which only uses a byte array to avoid callers having to worry about memory management.\n- *\n- * @deprecated Use {@link AggregatedHttpMessage} instead.\n- */\n-@Deprecated\n-public class SimpleHttpRequest {\n-\n-    private final URI uri;\n-    private final HttpMethod method;\n-    private final HttpHeaders headers;\n-    private final byte[] content;\n-\n-    SimpleHttpRequest(URI uri, HttpMethod method, HttpHeaders headers, byte[] content) {\n-        this.uri = uri;\n-        this.method = method;\n-        this.headers = new ImmutableHttpHeaders(headers);\n-        this.content = content;\n-    }\n-\n-    /**\n-     * Returns this request's URI.\n-     */\n-    public URI uri() {\n-        return uri;\n-    }\n-\n-    /**\n-     * Returns this request's HTTP method.\n-     */\n-    public HttpMethod method() {\n-        return method;\n-    }\n-\n-    /**\n-     * Returns this request's HTTP headers.\n-     */\n-    public HttpHeaders headers() {\n-        return headers;\n-    }\n-\n-    /**\n-     * Returns the length of this requests's content.\n-     */\n-    public int contentLength() {\n-        return content.length;\n-    }\n-\n-    /**\n-     * Reads this request's content into the destination buffer.\n-     */\n-    public void readContent(byte[] dst, int offset, int length) {\n-        System.arraycopy(content, 0, dst, offset, length);\n-    }\n-\n-    byte[] content() {\n-        return content;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return toString(uri, method, headers, content);\n-    }\n-\n-    static String toString(URI uri, HttpMethod method, HttpHeaders headers,\n-                           byte[] content) {\n-        StringBuilder buf = new StringBuilder();\n-        buf.append('(');\n-        buf.append(\"uri: \").append(uri);\n-        buf.append(\", method: \").append(method);\n-        buf.append(\", headers: \").append(headers);\n-        buf.append(\", content: \");\n-        if (content != null && content.length > 0) {\n-            buf.append(\"<length: \").append(content.length).append('>');\n-        } else {\n-            buf.append(\"<none>\");\n-        }\n-        buf.append(')');\n-        return buf.toString();\n-    }\n-\n-\n-    /**\n-     * A container for HTTP headers that cannot be mutated. Just delegates read operations to an underlying\n-     * {@link HttpHeaders} object.\n-     */\n-    private static final class ImmutableHttpHeaders extends HttpHeaders {\n-\n-        private final HttpHeaders delegate;\n-\n-        ImmutableHttpHeaders(HttpHeaders delegate) {\n-            this.delegate = delegate;\n-        }\n-\n-        @Override\n-        public String get(String name) {\n-            return delegate.get(name);\n-        }\n-\n-        @Override\n-        public Integer getInt(CharSequence name) {\n-            return delegate.getInt(name);\n-        }\n-\n-        @Override\n-        public int getInt(CharSequence name, int defaultValue) {\n-            return delegate.getInt(name, defaultValue);\n-        }\n-\n-        @Override\n-        public Short getShort(CharSequence name) {\n-            return delegate.getShort(name);\n-        }\n-\n-        @Override\n-        public short getShort(CharSequence name, short defaultValue) {\n-            return delegate.getShort(name, defaultValue);\n-        }\n-\n-        @Override\n-        public Long getTimeMillis(CharSequence name) {\n-            return delegate.getTimeMillis(name);\n-        }\n-\n-        @Override\n-        public long getTimeMillis(CharSequence name, long defaultValue) {\n-            return delegate.getTimeMillis(name, defaultValue);\n-        }\n-\n-        @Override\n-        public List<String> getAll(String name) {\n-            return delegate.getAll(name);\n-        }\n-\n-        @Override\n-        public List<Entry<String, String>> entries() {\n-            return delegate.entries();\n-        }\n-\n-        @Override\n-        public boolean contains(String name) {\n-            return delegate.contains(name);\n-        }\n-\n-        @Override\n-        public Iterator<Entry<String, String>> iterator() {\n-            return delegate.iterator();\n-        }\n-\n-        @Override\n-        public Iterator<Entry<CharSequence, CharSequence>> iteratorCharSequence() {\n-            return delegate.iteratorCharSequence();\n-        }\n-\n-        @Override\n-        public boolean isEmpty() {\n-            return delegate.isEmpty();\n-        }\n-\n-        @Override\n-        public int size() {\n-            return delegate.size();\n-        }\n-\n-        @Override\n-        public Set<String> names() {\n-            return delegate.names();\n-        }\n-\n-        @Override\n-        public HttpHeaders add(String name, Object value) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        @Override\n-        public HttpHeaders add(String name, Iterable<?> values) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        @Override\n-        public HttpHeaders addInt(CharSequence name, int value) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        @Override\n-        public HttpHeaders addShort(CharSequence name, short value) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        @Override\n-        public HttpHeaders set(String name, Object value) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        @Override\n-        public HttpHeaders set(String name, Iterable<?> values) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        @Override\n-        public HttpHeaders setInt(CharSequence name, int value) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        @Override\n-        public HttpHeaders setShort(CharSequence name, short value) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        @Override\n-        public HttpHeaders remove(String name) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        @Override\n-        public HttpHeaders clear() {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        @Override\n-        @SuppressWarnings(\"EqualsWhichDoesntCheckParameterClass\")\n-        public boolean equals(Object other) {\n-            return delegate.equals(other);\n-        }\n-\n-        @Override\n-        public int hashCode() {\n-            return delegate.hashCode();\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return delegate.toString();\n-        }\n-    }\n-}"
  },
  {
    "sha": "b0f017eb5521ac4d860198c23d92541662971a36",
    "filename": "core/src/main/java/com/linecorp/armeria/client/http/SimpleHttpRequestBuilder.java",
    "status": "removed",
    "additions": 0,
    "deletions": 162,
    "changes": 162,
    "blob_url": "https://github.com/line/armeria/blob/8fe17cd5f52444dcf0de3c7123feccc2604ecde1/core/src/main/java/com/linecorp/armeria/client/http/SimpleHttpRequestBuilder.java",
    "raw_url": "https://github.com/line/armeria/raw/8fe17cd5f52444dcf0de3c7123feccc2604ecde1/core/src/main/java/com/linecorp/armeria/client/http/SimpleHttpRequestBuilder.java",
    "contents_url": "https://api.github.com/repos/line/armeria/contents/core/src/main/java/com/linecorp/armeria/client/http/SimpleHttpRequestBuilder.java?ref=8fe17cd5f52444dcf0de3c7123feccc2604ecde1",
    "patch": "@@ -1,162 +0,0 @@\n-/*\n- * Copyright 2016 LINE Corporation\n- *\n- * LINE Corporation licenses this file to you under the Apache License,\n- * version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package com.linecorp.armeria.client.http;\n-\n-import static java.util.Objects.requireNonNull;\n-\n-import java.net.URI;\n-import java.nio.charset.Charset;\n-\n-import com.linecorp.armeria.common.http.AggregatedHttpMessage;\n-\n-import io.netty.handler.codec.http.DefaultHttpHeaders;\n-import io.netty.handler.codec.http.EmptyHttpHeaders;\n-import io.netty.handler.codec.http.HttpHeaders;\n-import io.netty.handler.codec.http.HttpMethod;\n-\n-/**\n- * Creates a new {@link SimpleHttpRequest}.\n- *\n- * @deprecated Use {@link AggregatedHttpMessage} instead.\n- */\n-@Deprecated\n-public final class SimpleHttpRequestBuilder {\n-\n-    private static final byte[] EMPTY = new byte[0];\n-\n-    private final URI uri;\n-    private final HttpMethod method;\n-    private HttpHeaders headers = EmptyHttpHeaders.INSTANCE;\n-    private byte[] content = EMPTY;\n-\n-    /**\n-     * Returns a {@link SimpleHttpRequestBuilder} for a GET request to the given URI,\n-     * for setting additional HTTP parameters as needed.\n-     */\n-    public static SimpleHttpRequestBuilder forGet(String uri) {\n-        return createRequestBuilder(uri, HttpMethod.GET);\n-    }\n-\n-    /**\n-     * Returns a {@link SimpleHttpRequestBuilder} for a POST request to the given URI,\n-     * for setting additional HTTP parameters as needed.\n-     */\n-    public static SimpleHttpRequestBuilder forPost(String uri) {\n-        return createRequestBuilder(uri, HttpMethod.POST);\n-    }\n-\n-    /**\n-     * Returns a {@link SimpleHttpRequestBuilder} for a PUT request to the given URI,\n-     * for setting additional HTTP parameters as needed.\n-     */\n-    public static SimpleHttpRequestBuilder forPut(String uri) {\n-        return createRequestBuilder(uri, HttpMethod.PUT);\n-    }\n-\n-    /**\n-     * Returns a {@link SimpleHttpRequestBuilder} for a PATCH request to the given URI,\n-     * for setting additional HTTP parameters as needed.\n-     */\n-    public static SimpleHttpRequestBuilder forPatch(String uri) {\n-        return createRequestBuilder(uri, HttpMethod.PATCH);\n-    }\n-\n-    /**\n-     * Returns a {@link SimpleHttpRequestBuilder} for a DELETE request to the given URI,\n-     * for setting additional HTTP parameters as needed.\n-     */\n-    public static SimpleHttpRequestBuilder forDelete(String uri) {\n-        return createRequestBuilder(uri, HttpMethod.DELETE);\n-    }\n-\n-    /**\n-     * Returns a {@link SimpleHttpRequestBuilder} for a HEAD request to the given URI,\n-     * for setting additional HTTP parameters as needed.\n-     */\n-    public static SimpleHttpRequestBuilder forHead(String uri) {\n-        return createRequestBuilder(uri, HttpMethod.HEAD);\n-    }\n-\n-    /**\n-     * Returns a {@link SimpleHttpRequestBuilder} for an OPTIONS request to the given URI,\n-     * for setting additional HTTP parameters as needed.\n-     */\n-    public static SimpleHttpRequestBuilder forOptions(String uri) {\n-        return createRequestBuilder(uri, HttpMethod.OPTIONS);\n-    }\n-\n-    private static SimpleHttpRequestBuilder createRequestBuilder(String uri, HttpMethod method) {\n-        requireNonNull(uri);\n-        return new SimpleHttpRequestBuilder(URI.create(uri), method);\n-    }\n-\n-    private SimpleHttpRequestBuilder(URI uri, HttpMethod method) {\n-        this.uri = uri;\n-        this.method = method;\n-    }\n-\n-    /**\n-     * Adds a new header with the specified {@code name} and {@code value}.\n-     */\n-    public SimpleHttpRequestBuilder header(CharSequence name, Object value) {\n-        headers().add(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n-        return this;\n-    }\n-\n-    /**\n-     * Adds all header entries in the specified {@code headers}.\n-     */\n-    public SimpleHttpRequestBuilder headers(HttpHeaders headers) {\n-        headers().add(requireNonNull(headers));\n-        return this;\n-    }\n-\n-    private HttpHeaders headers() {\n-        if (headers == EmptyHttpHeaders.INSTANCE) {\n-            headers = new DefaultHttpHeaders();\n-        }\n-        return headers;\n-    }\n-\n-    /**\n-     * Sets the given bytes to be used as the request content.\n-     */\n-    public SimpleHttpRequestBuilder content(byte[] bytes) {\n-        this.content = bytes;\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the given string to be used as the request content, decoding to bytes with the\n-     * given charset.\n-     */\n-    public SimpleHttpRequestBuilder content(String chars, Charset charset) {\n-        return content(chars.getBytes(charset));\n-    }\n-\n-    /**\n-     * Creates a new {@link SimpleHttpRequest}.\n-     */\n-    public SimpleHttpRequest build() {\n-        return new SimpleHttpRequest(uri, method, headers, content);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return SimpleHttpRequest.toString(uri, method, headers, content);\n-    }\n-}"
  },
  {
    "sha": "7c7ac5e507b731055c4dd7b461a872f18e955b04",
    "filename": "core/src/main/java/com/linecorp/armeria/client/http/SimpleHttpResponse.java",
    "status": "removed",
    "additions": 0,
    "deletions": 83,
    "changes": 83,
    "blob_url": "https://github.com/line/armeria/blob/8fe17cd5f52444dcf0de3c7123feccc2604ecde1/core/src/main/java/com/linecorp/armeria/client/http/SimpleHttpResponse.java",
    "raw_url": "https://github.com/line/armeria/raw/8fe17cd5f52444dcf0de3c7123feccc2604ecde1/core/src/main/java/com/linecorp/armeria/client/http/SimpleHttpResponse.java",
    "contents_url": "https://api.github.com/repos/line/armeria/contents/core/src/main/java/com/linecorp/armeria/client/http/SimpleHttpResponse.java?ref=8fe17cd5f52444dcf0de3c7123feccc2604ecde1",
    "patch": "@@ -1,83 +0,0 @@\n-/*\n- * Copyright 2016 LINE Corporation\n- *\n- * LINE Corporation licenses this file to you under the Apache License,\n- * version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package com.linecorp.armeria.client.http;\n-\n-import com.linecorp.armeria.common.http.AggregatedHttpMessage;\n-\n-import io.netty.handler.codec.http.FullHttpResponse;\n-import io.netty.handler.codec.http.HttpHeaders;\n-import io.netty.handler.codec.http.HttpResponseStatus;\n-\n-/**\n- * A container for information returned in an HTTP response. This is a simpler version of\n- * {@link FullHttpResponse} which only uses a byte array to avoid callers having to worry about memory\n- * management.\n- *\n- * @deprecated Use {@link AggregatedHttpMessage} instead.\n- */\n-@Deprecated\n-public class SimpleHttpResponse {\n-\n-    private final HttpResponseStatus status;\n-    private final HttpHeaders headers;\n-    private final byte[] content;\n-\n-    SimpleHttpResponse(HttpResponseStatus status, HttpHeaders headers, byte[] content) {\n-        this.status = status;\n-        this.headers = headers;\n-        this.content = content;\n-    }\n-\n-    /**\n-     * Returns the HTTP status.\n-     */\n-    public HttpResponseStatus status() {\n-        return status;\n-    }\n-\n-    /**\n-     * Returns the HTTP response headers.\n-     */\n-    public HttpHeaders headers() {\n-        return headers;\n-    }\n-\n-    /**\n-     * Returns the HTTP response content.\n-     *\n-     * @return the HTTP response content, or an empty array if there's no content\n-     */\n-    public byte[] content() {\n-        return content;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        StringBuilder buf = new StringBuilder();\n-        buf.append('(');\n-        buf.append(\"status: \").append(status);\n-        buf.append(\", headers: \").append(headers);\n-        buf.append(\", content: \");\n-        if (content.length > 0) {\n-            buf.append(\"<length: \").append(content.length).append('>');\n-        } else {\n-            buf.append(\"<none>\");\n-        }\n-        buf.append(')');\n-        return buf.toString();\n-    }\n-}"
  },
  {
    "sha": "6e61d5711dfa40b1ce35f4299ff3a7ffc00b91c0",
    "filename": "core/src/test/java/com/linecorp/armeria/client/http/HttpClientIntegrationTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 43,
    "changes": 43,
    "blob_url": "https://github.com/line/armeria/blob/35b406e5c8f4098da9c460696f01a835e79078b2/core/src/test/java/com/linecorp/armeria/client/http/HttpClientIntegrationTest.java",
    "raw_url": "https://github.com/line/armeria/raw/35b406e5c8f4098da9c460696f01a835e79078b2/core/src/test/java/com/linecorp/armeria/client/http/HttpClientIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/line/armeria/contents/core/src/test/java/com/linecorp/armeria/client/http/HttpClientIntegrationTest.java?ref=35b406e5c8f4098da9c460696f01a835e79078b2",
    "patch": "@@ -59,8 +59,6 @@\n import com.linecorp.armeria.server.ServiceRequestContext;\n import com.linecorp.armeria.server.http.AbstractHttpService;\n \n-import io.netty.handler.codec.http.HttpResponseStatus;\n-\n public class HttpClientIntegrationTest {\n \n     private static final String TEST_USER_AGENT_NAME = \"ArmeriaTest\";\n@@ -192,21 +190,6 @@ public void testRequestNoBody() throws Exception {\n     }\n \n     @Test\n-    @SuppressWarnings(\"deprecation\")\n-    public void testRequestNoBodyWithSimpleClient() throws Exception {\n-        SimpleHttpClient client = Clients.newClient(clientFactory, \"none+http://127.0.0.1:\" + httpPort,\n-                                                    SimpleHttpClient.class);\n-        SimpleHttpRequest request = SimpleHttpRequestBuilder.forGet(\"/httptestbody\")\n-                                                            .header(HttpHeaderNames.ACCEPT, \"utf-8\")\n-                                                            .build();\n-        SimpleHttpResponse response = client.execute(request).get();\n-        assertEquals(HttpResponseStatus.OK, response.status());\n-        assertEquals(\"alwayscache\", response.headers().get(HttpHeaderNames.CACHE_CONTROL));\n-        assertEquals(\"METHOD: GET|ACCEPT: utf-8|BODY: \",\n-                     new String(response.content(), StandardCharsets.UTF_8));\n-    }\n-\n-    @Test\n     public void testRequestWithBody() throws Exception {\n         HttpClient client = Clients.newClient(clientFactory, \"none+http://127.0.0.1:\" + httpPort,\n                                               HttpClient.class);\n@@ -223,22 +206,6 @@ public void testRequestWithBody() throws Exception {\n     }\n \n     @Test\n-    @SuppressWarnings(\"deprecation\")\n-    public void testRequestWithBodyWithSimpleClient() throws Exception {\n-        SimpleHttpClient client = Clients.newClient(clientFactory, \"none+http://127.0.0.1:\" + httpPort,\n-                                                    SimpleHttpClient.class);\n-        SimpleHttpRequest request = SimpleHttpRequestBuilder.forPost(\"/httptestbody\")\n-                                                            .header(HttpHeaderNames.ACCEPT, \"utf-8\")\n-                                                            .content(\"requestbody日本語\", StandardCharsets.UTF_8)\n-                                                            .build();\n-        SimpleHttpResponse response = client.execute(request).get();\n-        assertEquals(HttpResponseStatus.OK, response.status());\n-        assertEquals(\"alwayscache\", response.headers().get(HttpHeaderNames.CACHE_CONTROL));\n-        assertEquals(\"METHOD: POST|ACCEPT: utf-8|BODY: requestbody日本語\",\n-                     new String(response.content(), StandardCharsets.UTF_8));\n-    }\n-\n-    @Test\n     public void testNot200() throws Exception {\n         HttpClient client = Clients.newClient(clientFactory, \"none+http://127.0.0.1:\" + httpPort,\n                                               HttpClient.class);\n@@ -248,16 +215,6 @@ public void testNot200() throws Exception {\n         assertEquals(HttpStatus.NOT_FOUND, response.headers().status());\n     }\n \n-    @Test\n-    @SuppressWarnings(\"deprecation\")\n-    public void testNot200WithSimpleClient() throws Exception {\n-        SimpleHttpClient client = Clients.newClient(clientFactory, \"none+http://127.0.0.1:\" + httpPort,\n-                                                    SimpleHttpClient.class);\n-        SimpleHttpRequest request = SimpleHttpRequestBuilder.forGet(\"/not200\").build();\n-        SimpleHttpResponse response = client.execute(request).get();\n-        assertEquals(HttpResponseStatus.NOT_FOUND, response.status());\n-    }\n-\n     /**\n      * When the request path contains double slashes, they should be replaced with single slashes.\n      */"
  },
  {
    "sha": "a7f61c46b26d1b9f5fd7a08f2bc418a489ee7184",
    "filename": "core/src/test/java/com/linecorp/armeria/client/http/SimpleHttpRequestBuilderTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 102,
    "changes": 102,
    "blob_url": "https://github.com/line/armeria/blob/8fe17cd5f52444dcf0de3c7123feccc2604ecde1/core/src/test/java/com/linecorp/armeria/client/http/SimpleHttpRequestBuilderTest.java",
    "raw_url": "https://github.com/line/armeria/raw/8fe17cd5f52444dcf0de3c7123feccc2604ecde1/core/src/test/java/com/linecorp/armeria/client/http/SimpleHttpRequestBuilderTest.java",
    "contents_url": "https://api.github.com/repos/line/armeria/contents/core/src/test/java/com/linecorp/armeria/client/http/SimpleHttpRequestBuilderTest.java?ref=8fe17cd5f52444dcf0de3c7123feccc2604ecde1",
    "patch": "@@ -1,102 +0,0 @@\n-/*\n- * Copyright 2015 LINE Corporation\n- *\n- * LINE Corporation licenses this file to you under the Apache License,\n- * version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package com.linecorp.armeria.client.http;\n-\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-\n-import java.nio.charset.StandardCharsets;\n-import java.util.Arrays;\n-\n-import org.junit.Test;\n-\n-import io.netty.handler.codec.http.DefaultHttpHeaders;\n-import io.netty.handler.codec.http.HttpHeaderNames;\n-import io.netty.handler.codec.http.HttpHeaders;\n-import io.netty.handler.codec.http.HttpMethod;\n-\n-public class SimpleHttpRequestBuilderTest {\n-\n-    @Test\n-    public void defaults() {\n-        SimpleHttpRequest request = SimpleHttpRequestBuilder.forGet(\"/path\").build();\n-        assertEquals(\"/path\", request.uri().toString());\n-        assertEquals(HttpMethod.GET, request.method());\n-        assertTrue(request.headers().isEmpty());\n-        assertEquals(0, request.content().length);\n-    }\n-\n-    @Test\n-    public void httpMethods() {\n-        assertEquals(HttpMethod.GET, SimpleHttpRequestBuilder.forGet(\"/path\").build().method());\n-        assertEquals(HttpMethod.POST, SimpleHttpRequestBuilder.forPost(\"/path\").build().method());\n-        assertEquals(HttpMethod.PUT, SimpleHttpRequestBuilder.forPut(\"/path\").build().method());\n-        assertEquals(HttpMethod.PATCH, SimpleHttpRequestBuilder.forPatch(\"/path\").build().method());\n-        assertEquals(HttpMethod.DELETE, SimpleHttpRequestBuilder.forDelete(\"/path\").build().method());\n-        assertEquals(HttpMethod.HEAD, SimpleHttpRequestBuilder.forHead(\"/path\").build().method());\n-        assertEquals(HttpMethod.OPTIONS, SimpleHttpRequestBuilder.forOptions(\"/path\").build().method());\n-    }\n-\n-    @Test\n-    public void headerByName() {\n-        SimpleHttpRequest request = SimpleHttpRequestBuilder.forGet(\"/path\")\n-                .header(HttpHeaderNames.ACCEPT, \"utf-8\")\n-                .header(HttpHeaderNames.COOKIE, \"monster\")\n-                .header(HttpHeaderNames.ACCEPT, \"shift-jis\")\n-                .build();\n-        assertEquals(3, request.headers().size());\n-        assertEquals(Arrays.asList(\"utf-8\", \"shift-jis\"), request.headers().getAll(HttpHeaderNames.ACCEPT));\n-        assertEquals(\"monster\", request.headers().get(HttpHeaderNames.COOKIE));\n-    }\n-\n-    @Test\n-    public void headersObject() {\n-        HttpHeaders headers = new DefaultHttpHeaders();\n-        headers.set(HttpHeaderNames.CACHE_CONTROL, \"alwayscache\");\n-        headers.set(HttpHeaderNames.ACCEPT_ENCODING, \"gzip\");\n-        SimpleHttpRequest request = SimpleHttpRequestBuilder.forGet(\"/path\")\n-                .header(HttpHeaderNames.ACCEPT, \"utf-8\")\n-                .headers(headers)\n-                .header(HttpHeaderNames.ORIGIN, \"localhost\")\n-                .build();\n-        assertEquals(4, request.headers().size());\n-        assertEquals(\"alwayscache\", request.headers().get(HttpHeaderNames.CACHE_CONTROL));\n-        assertEquals(\"gzip\", request.headers().get(HttpHeaderNames.ACCEPT_ENCODING));\n-        assertEquals(\"localhost\", request.headers().get(HttpHeaderNames.ORIGIN));\n-        assertEquals(\"utf-8\", request.headers().get(HttpHeaderNames.ACCEPT));\n-    }\n-\n-    @Test\n-    public void bodyBytes() {\n-        byte[] contentBytes = \"contentBytesWithSome日本語\".getBytes(StandardCharsets.UTF_8);\n-        SimpleHttpRequest request = SimpleHttpRequestBuilder.forGet(\"/path\")\n-                .content(contentBytes)\n-                .build();\n-        assertEquals(contentBytes.length, request.contentLength());\n-        assertArrayEquals(contentBytes, request.content());\n-    }\n-\n-    @Test\n-    public void bodyString() {\n-        SimpleHttpRequest request = SimpleHttpRequestBuilder.forGet(\"/path\")\n-                .content(\"contentWithSome日本語\", StandardCharsets.UTF_8)\n-                .build();\n-        assertEquals(\"contentWithSome日本語\",\n-                     new String(request.content(), StandardCharsets.UTF_8));\n-    }\n-}"
  },
  {
    "sha": "9d5b2944ba1b3de2d152c8a774e6a6bb14aff35e",
    "filename": "core/src/test/java/com/linecorp/armeria/client/http/SimpleHttpResponseTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 43,
    "changes": 43,
    "blob_url": "https://github.com/line/armeria/blob/8fe17cd5f52444dcf0de3c7123feccc2604ecde1/core/src/test/java/com/linecorp/armeria/client/http/SimpleHttpResponseTest.java",
    "raw_url": "https://github.com/line/armeria/raw/8fe17cd5f52444dcf0de3c7123feccc2604ecde1/core/src/test/java/com/linecorp/armeria/client/http/SimpleHttpResponseTest.java",
    "contents_url": "https://api.github.com/repos/line/armeria/contents/core/src/test/java/com/linecorp/armeria/client/http/SimpleHttpResponseTest.java?ref=8fe17cd5f52444dcf0de3c7123feccc2604ecde1",
    "patch": "@@ -1,43 +0,0 @@\n-/*\n- * Copyright 2015 LINE Corporation\n- *\n- * LINE Corporation licenses this file to you under the Apache License,\n- * version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package com.linecorp.armeria.client.http;\n-\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-\n-import java.nio.charset.StandardCharsets;\n-\n-import org.junit.Test;\n-\n-import io.netty.handler.codec.http.DefaultHttpHeaders;\n-import io.netty.handler.codec.http.HttpHeaderNames;\n-import io.netty.handler.codec.http.HttpHeaders;\n-import io.netty.handler.codec.http.HttpResponseStatus;\n-\n-public class SimpleHttpResponseTest {\n-\n-    @Test\n-    public void normal() {\n-        HttpHeaders headers = new DefaultHttpHeaders();\n-        headers.set(HttpHeaderNames.ACCEPT, \"utf-8\");\n-        byte[] body = \"content\".getBytes(StandardCharsets.UTF_8);\n-        SimpleHttpResponse response = new SimpleHttpResponse(HttpResponseStatus.NOT_FOUND, headers, body);\n-        assertEquals(HttpResponseStatus.NOT_FOUND, response.status());\n-        assertEquals(headers, response.headers());\n-        assertArrayEquals(body, response.content());\n-    }\n-}"
  }
]
